<library>
	<name>fxc_filter_curve</name>
	<desc>Library of common filters and power curves for the FXCore DSP from Experimental Noize</desc>
	<sub>
		<name>lp_hp_mr</name>
		<desc>IIR low pass and high pass filter using MREGs for in, out and K</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal</desc>
		</param>
		<param>
			<name>k</name>
			<type>MREG</type>
			<desc>MREG holding filter frequency coefficient, range 0 to 1.0</desc>
		</param>
		<param>
			<name>hp</name>
			<type>MREG</type>
			<desc>MREG holding high pass output</desc>
		</param>
		<param>
			<name>lp</name>
			<type>MREG</type>
			<desc>MREG holding low pass output, do not overwrite/change</desc>
		</param>
		<code>
			cpy_cm	r0, lp
			cpy_cm	r1, in
			subs	r1, r0		; HP = in - LP
			cpy_mc	hp, acc32	; save HP
			cpy_cm	r2, k
			multrr	r2, acc32	; *k
			multri	acc32, 0.95	; really want to limit to 0.5Fs whic is about K=0.95
			adds	r0, acc32	; LP + (in-LP)*K
			cpy_mc	lp, acc32	; save it
		</code>
	</sub>
	<sub>
		<name>svf_mr</name>
		<desc>State variable filter using MREGs for in, out and controls</desc>
		<param>
			<name>freq</name>
			<type>MREG</type>
			<desc>MREG to control frequency point of filter, range 0 to 1.0</desc>
		</param>
		<param>
			<name>q</name>
			<type>MREG</type>
			<desc>MREG to control Q of filter, range 0 to 1.0</desc>
		</param>
		<param>
			<name>in_lp</name>
			<type>MREG</type>
			<desc>MREG to hold input low-pass filter, not controled by freq or q, do not overwrite/change</desc>
		</param>
		<param>
			<name>bp</name>
			<type>MREG</type>
			<desc>MREG to hold band-pass filter, do not overwrite/change</desc>
		</param>
		<param>
			<name>lp</name>
			<type>MREG</type>
			<desc>MREG to hold low-pass filter, do not overwrite/change</desc>
		</param>
		<param>
			<name>hp</name>
			<type>MREG</type>
			<desc>MREG to hold high-pass filter</desc>
		</param>
		<param>
			<name>notch</name>
			<type>MREG</type>
			<desc>MREG to hold notch filter</desc>
		</param>
		<param>
			<name>sig_in</name>
			<type>MREG</type>
			<desc>MREG to hold input signal to filter</desc>
		</param>
		<code>
			cpy_cm r7, freq
			cpy_cm r8, q	; actually this is D,which is 1/Q so invert pot sweep to make it act like a Q control
			wrdld acc32, 0x7fff ; put almost 1.0 into acc32
			ori acc32, 0xffff ; don't forget the LSBs
			subs acc32, r8 ; 1-pot in acc32
			cpy_cc r8, acc32
			cpy_cm r0, sig_in ; read in0 into temp
			sra r0, 1 ; in/2
			cpy_cc r0, acc32 ; save to temp
			cpy_cm r2, in_lp
			adds acc32, r2 ; in/2 + input LP
			cpy_cc r1, acc32 ; input to SVF in temp2
			cpy_mc in_lp, r0 ; save in/2 to input LP
			cpy_cm r4, bp
			multrr r8, r4 ; Kd * BP
			subs r1, acc32 ; input - Kd*BP, this is the notch
			cpy_cc r5, acc32 ; save notch result
			multrr r7, r4 ; Kf * BP
			cpy_cm r3, lp
			adds r3, acc32 ; + LP
			cpy_cc r3, acc32 ; save to LP
			subs r5, acc32 ; Notch - LP is HP
			cpy_cc r6, acc32 ; save it
			multrr r7, acc32 ; Kf * HP
			adds r4, acc32 ; + BP
			cpy_mc bp, acc32 ; Save to BP
			cpy_mc lp, r3
			cpy_mc hp, r6
			cpy_mc notch, r5
		</code>
	</sub>
	<sub>
		<name>low_shelf_mr</name>
		<desc>Low shelf filter using MREGs for in, out, K and S</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal</desc>
		</param>
		<param>
			<name>k</name>
			<type>MREG</type>
			<desc>MREG holding filter frequency coefficient, range 0 to 1.0</desc>
		</param>
		<param>
			<name>s</name>
			<type>MREG</type>
			<desc>MREG holding shelf level, ranges 0 (cut) to 1.0 (boost)</desc>
		</param>
		<param>
			<name>del</name>
			<type>MREG</type>
			<desc>MREG holding internal delay, do not overwrite/change</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding output</desc>
		</param>
		<code>
			cpy_cm	r0, s
			addsi	r0, -0.5 	; shift to -0/5 to +0.5 range
			sls	acc32, 1 	; now -1.0 to +1.0 range
			cpy_cc	r0, acc32	; save S
			cpy_cm	r1, in		; Read in the input
			cpy_cm	r2, del		; read the delay
			multrr	r0, r2
			adds	acc32, r1
			cpy_mc	out, acc32
			cpy_cm	r3, k
			subs	r1, r2		; in - delay
			multrr	acc32, r3	; *K
			adds	acc32, r2	; + delay
			cpy_mc	del, acc32
		</code>
	</sub>
	<sub>
		<name>high_shelf_mr</name>
		<desc>High shelf filter using MREGs for in, out, K and S</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal</desc>
		</param>
		<param>
			<name>k</name>
			<type>MREG</type>
			<desc>MREG holding filter frequency coefficient, range 0 to 1.0</desc>
		</param>
		<param>
			<name>s</name>
			<type>MREG</type>
			<desc>MREG holding shelf level, ranges 0 (cut) to 1.0 (boost)</desc>
		</param>
		<param>
			<name>del</name>
			<type>MREG</type>
			<desc>MREG holding internal delay, do not overwrite/change</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding output</desc>
		</param>
		<code>
			cpy_cm	r0, s
			addsi	r0, -0.5 	; shift to -0/5 to +0.5 range
			sls	acc32, 1 	; now -1.0 to +1.0 range
			cpy_cc	r0, acc32	; save S
			cpy_cm	r1, in		; Read in the input
			cpy_cm	r2, del		; read the delay
			cpy_cm	r3, k		; read in k
			subs	r1, r2
			multrr	acc32, r0
			adds	acc32, r1
			cpy_mc	out, acc32
			subs	r1, r2		; in - delay
			multrr	acc32, r3	; *K
			adds	acc32, r2	; + delay
			cpy_mc	del, acc32
		</code>
	</sub>
	<sub>
		<name>mr_^_n</name>
		<desc>MREG to the n power, MREG ranges 0 to 1.0, n is 1 to 7. Useful for making a linear value like a POT into an exponetial curve see AN-7 POT^n curves</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>n</name>
			<type>INT</type>
			<desc>Power to raise to, range 1 to 7</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding result</desc>
		</param>
		<code>
			cpy_cm	r0, in
			log2	r0
			cpy_cc	r0, acc32
			wrdld	acc32, n
			sls	acc32, 12
			multrr	acc32, r0
			sls	acc32, 3
			exp2	acc32
			cpy_mc	out, acc32
		</code>
	</sub>
	<sub>
		<name>1-mr_^_n</name>
		<desc>MREG to the n power, MREG ranges 0 to 1.0, n is 1 to 7. Useful for making a linear value like a POT into an exponetial curve see AN-7 1-(POT)^n curves</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>n</name>
			<type>INT</type>
			<desc>Power to raise to, range 1 to 7</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding result</desc>
		</param>
		<code>
			cpy_cm	r0, in
			wrdld	r1, 0x7fff
			ori	r1, 0xffff
			cpy_cc	r1, acc32
			log2	r0
			cpy_cc	r0, acc32
			wrdld	acc32, n
			sls	acc32, 12
			multrr	acc32, r0
			sls	acc32, 3
			exp2	acc32
			subs	r1, acc32
			cpy_mc	out, acc32
		</code>
	</sub>
	<sub>
		<name>_1-mr_^_n</name>
		<desc>MREG to the n power, MREG ranges 0 to 1.0, n is 1 to 7. Useful for making a linear value like a POT into an exponetial curve see AN-7 (1-POT)^n curves</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>n</name>
			<type>INT</type>
			<desc>Power to raise to, range 1 to 7</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding result</desc>
		</param>
		<code>
			cpy_cm	r0, in
			wrdld	r1, 0x7fff
			ori	r1, 0xffff
			cpy_cc	r1, acc32
			subs	r1, r0
			log2	acc32
			cpy_cc	r0, acc32
			wrdld	acc32, n
			sls	acc32, 12
			multrr	acc32, r0
			sls	acc32, 3
			exp2	acc32
			cpy_mc	out, acc32
		</code>
	</sub>
	<sub>
		<name>1-1-mr_^_n</name>
		<desc>MREG to the n power, MREG ranges 0 to 1.0, n is 1 to 7. Useful for making a linear value like a POT into an exponetial curve see AN-7 1-(1-POT)^n curves</desc>
		<param>
			<name>in</name>
			<type>MREG</type>
			<desc>MREG holding input signal, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>n</name>
			<type>INT</type>
			<desc>Power to raise to, range 1 to 7</desc>
		</param>
		<param>
			<name>out</name>
			<type>MREG</type>
			<desc>MREG holding result</desc>
		</param>
		<code>
			cpy_cm	r0, in
			wrdld	r1, 0x7fff
			ori	r1, 0xffff
			cpy_cc	r1, acc32
			subs	r1, r0
			log2	acc32
			cpy_cc	r0, acc32
			wrdld	acc32, n
			sls	acc32, 12
			multrr	acc32, r0
			sls	acc32, 3
			exp2	acc32
			subs	r1, acc32
			cpy_mc	out, acc32
		</code>
	</sub>
</library>
