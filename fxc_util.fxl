<library>
	<name>fxc_util</name>
	<desc>Library of utility routines for the FXCore DSP from Experimental Noize</desc>
	<sub>
		<name>get_sfr</name>
		<desc>SFR in to a MREG.</desc>
		<param>
			<name>in</name>
			<type>SFR</type>
			<desc>SFR to read like in0, in1, pot0, etc..</desc>
		</param>
		<param>
			<name>sig</name>
			<type>MREG</type>
			<desc>MREG to save SFR into</desc>
		</param>
		<code>
			cpy_cs	r0, in
			cpy_mc	sig, r0
		</code>
	</sub>
	<sub>
		<name>put_sfr</name>
		<desc>MREG out to a SFR.</desc>
		<param>
			<name>out</name>
			<type>SFR</type>
			<desc>SFR to save to like out0, etc.</desc>
		</param>
		<param>
			<name>sig</name>
			<type>MREG</type>
			<desc>MREG to send out to SFR</desc>
		</param>
		<code>
			cpy_cm	r0, sig
			cpy_sc	out, r0
		</code>
	</sub>
	<sub>
		<name>mr_mix</name>
		<desc>Mix 2 signals from 100% sig1/0% sig2 to 0% sig1/100% sig2 using an MREG to adjust the mix.</desc>
		<param>
			<name>sig1</name>
			<type>MREG</type>
			<desc>First signal to mix</desc>
		</param>
		<param>
			<name>sig2</name>
			<type>MREG</type>
			<desc>Second signal to mix</desc>
		</param>
		<param>
			<name>mixcon</name>
			<type>MREG</type>
			<desc>Mix control, range 0 to 1.0, 0 means 100% sig1 and 0% sig2, 1.0 mean 0% sig1 and 100% sig2</desc>
		</param>
		<param>
			<name>sigout</name>
			<type>MREG</type>
			<desc>Mixed signal out</desc>
		</param>
		<code>
			cpy_cm	r0, sig1	; get the signals and mix control
			cpy_cm	r1, sig2
			cpy_cm	r2, mixcon
			multrr	r1, r2		; sig2 * mix control
			cpy_cc	r1, acc32	; save it
			neg	r2		; mixcon = -mixcon
			cpy_cc	r2, acc32
			wrdld	acc32, 0x7FFF	; put (almost) 1.0 into acc32
			ori	acc32, 0xFFFF
			adds	r2, acc32	; 1.0 - mixcon
			multrr	r0, acc32	; * sig1
			adds	r1, acc32	; + scaled sig2	
			cpy_mc	sigout, acc32	; output
		</code>
	</sub>
	<sub>
		<name>mr_lfo</name>
		<desc>LFO using mregs for most controls, set low and high frequencies and selectable wav out with sin, tri, ramp and square. Wave ranges -1.0 to +1.0, best for 0.01 to 1000 hz range</desc>
		<param>
			<name>frequency</name>
			<type>MREG</type>
			<desc>Frequency control, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>phase</name>
			<type>MREG</type>
			<desc>MREG to hold phase counter</desc>
		</param>
		<param>
			<name>wave_out</name>
			<type>MREG</type>
			<desc>MREG that holds output wave selected, ranges -1.0 to +1.0</desc>
		</param>
		<param>
			<name>sin</name>
			<type>MREG</type>
			<desc>MREG to hold raw sin value</desc>
		</param>
		<param>
			<name>cos</name>
			<type>MREG</type>
			<desc>MREG to hold raw cos value</desc>
		</param>
		<param>
			<name>fmin</name>
			<type>decimal</type>
			<desc>Minimum LFO frequency</desc>
		</param>
		<param>
			<name>fmax</name>
			<type>decimal</type>
			<desc>Maximum LFO frequency</desc>
		</param>
		<param>
			<name>Fs</name>
			<type>decimal</type>
			<desc>Sample rate</desc>
		</param>
		<param>
			<name>sw_shift</name>
			<type>integer</type>
			<desc>Switches to select waveform must be next to each other, this number indicates where they are relative to SW0. So if using SW1 and SW0 then this is 0, if using SW2 and SW1 this is 1, etc.</desc>
		</param>
		<code>
			; load values
			wrdld	r0, (2*3.141592654*fmax/Fs-2*3.141592654*fmin/Fs)*2147483647.u // range value for sin/cos
			ori	r0, (2*3.141592654*fmax/Fs-2*3.141592654*fmin/Fs)*2147483647.l
			cpy_cc	r0, acc32
			wrdld	r1, (2*3.141592654*fmin/Fs)*2147483647.u // min increment value for sin/cos
			ori	r1, (2*3.141592654*fmin/Fs)*2147483647.l
			cpy_cc	r1, acc32
			cpy_cm	r2, phase
			cpy_cm	r3, sin
			cpy_cm	r4, cos
			wrdld	r5, (fmax-fmin)*2^32/Fs.u // range value for sin/cos
			ori	r5, (fmax-fmin)*2^32/Fs.l
			cpy_cc	r5, acc32
			wrdld	r6, fmin*2^32/Fs.u // min increment value for sin/cos
			ori	r6, fmin*2^32/Fs.l
			cpy_cc	r6, acc32

			// check if sin and cos are initialized, if not set initial values
			or	r3, r4	// are r3 and r4 both 0?
			jnz	acc32, go // nope, jump away
			cpy_cc	r3, acc32
			wrdld	r4, 0x7FFF
			ori	r4, 0xFFFF
			cpy_cc	r4, acc32
			go:
			; calculate the phase increment for sin/cos
			cpy_cm    acc32, frequency		; get control for 0 to 1 range
			multrr    acc32, acc32			; square it
			multrr    acc32, r0				; multiply by range
			adds      acc32, r1          ; add r1 for min increment,NOTE non-saturated add so phase counter rolls over
			cpy_cc	  r15, acc32			; save it for sin/cos calc
			; now for ramp/tri/square
			cpy_cm    acc32, frequency		; get control for 0 to 1 range
			multrr    acc32, acc32			; square it
			multrr    acc32, r5				; multiply by range
			adds      acc32, r6          ; add r1 for min increment,NOTE non-saturated add so phase counter rolls over
			add       acc32, r2            ; add current phase position, again non-saturated!
			cpy_cc    r2, acc32            ; save new phase
			cpy_mc	  phase, r2
			; SINE wave
			multrr	r4, r15		; cos*inc
			adds	acc32, r3	; +sin
			cpy_cc	r3, acc32
			multrr	r3, r15		; sin*inc
			subs	r4, acc32	; cos-sin*inc
			cpy_mc	sin, r3
			cpy_mc	cos, acc32
			; select wave form
			cpy_cs  r15, switch
			sr	r15, sw_shift
			andi    acc32, SW0|SW1
			cpy_cc	r15, acc32
			xori	r15, 0x0
			jz	acc32, do_sin
			xori	r15, 0x1
			jz	acc32, do_saw
			xori	r15, 0x2
			jz	acc32, do_tri
			; Square wave
			; Either +1 or 0 based on sign of phase register
			wrdld     acc32, 0x7FFF           ; put +1.0 into temp
			ori	  acc32, 0xFFFF
			jgez      r2, set_sq           ; if phase is positive jump
			neg       acc32            ; phase was negative so make it -1
			set_sq:
			jmp	do_scale
			; Sawtooth wave
			; The phase counter register is a sawtooth so just use it
			do_saw:
			cpy_cc	acc32, r2	; 
			jmp	do_scale
			; Triangle wave
			; We can create a triangle by taking the abs of the sawtooth (phase reg)
			do_tri:
			abs       r2                   ; make it a triangle from 0 to 1
			addsi	acc32, -0.5		; now -0.5 to +0.5
			sls	acc32, 1
			jmp	do_scale
			; Sin wave
			do_sin:
			cpy_cc	acc32, r3
			; output result
			do_scale:
			cpy_mc	wave_out, acc32
		</code>
	</sub>
	<sub>
		<name>mr_flash_led</name>
		<desc>Flash an LED connected to a USR pin using an MREG</desc>
		<param>
			<name>USER</name>
			<type>INT</type>
			<desc>Which user output to flash, put USER0 or USER1</desc>
		</param>
		<param>
			<name>LFO</name>
			<type>MREG</type>
			<desc>Which MREG to use as the source, must range -1.0 to +1.0.</desc>
		</param>
		<param>
			<name>bright</name>
			<type>MREG</type>
			<desc>MREG to hold brightness value</desc>
		</param>
		<code>
			cpy_cs    acc32, samplecnt        ; Get the sample counter
			andi      acc32, 0xFF             ; Mask b[7:0]
			jnz       acc32, doPWM            ;

			; Reload new PWM value from LFO into "bright"
			cpy_cm    r0, LFO                 ; read in LFO wave ranges -1.0 to +1.0 (well, almost)
			sra       r0, 1                   ; /2 to +/- 1/2
			addsi     acc32, 0.5              ; ranges 0 to 1
			sra       acc32, 23                  ; shift the PWM value in place
			cpy_mc    bright, acc32           ; save it

			doPWM:
			cpy_cm	  r0, bright
			addi      r0, -1                  ; subtract 1 from on count
			cpy_mc    bright, acc32           ; Save updated "bright"
			xor       acc32, acc32            ; Clear acc32 for the LED off case
			jneg      r0, doLED               ;
			ori       acc32, 1                ; Set acc32[0] for the LED on case

			doLED:
			set       USER|0, acc32          ; set the usr output per the acc32 LSB
		</code>
	</sub>
	<sub>
		<name>mr_sin2f</name>
		<desc>Given a SIN and COS wave input generate a SIN wave at twice the frequency</desc>
		<param>
			<name>SIN</name>
			<type>MREG</type>
			<desc>SIN wave input</desc>
		</param>
		<param>
			<name>COS</name>
			<type>MREG</type>
			<desc>COS wave input</desc>
		</param>
		<param>
			<name>SIN2F</name>
			<type>MREG</type>
			<desc>MREG to put calculated double frequency sin wave</desc>
		</param>
		<code>
			cpy_cm	r0, SIN
			cpy_cm	r1, COS
			multrr	r0, r1
			sls	acc32, 1
			cpy_mc	SIN2F, acc32
		</code>
	</sub>
	<sub>
		<name>mr_divide</name>
		<desc>Divide function: A/B = C note that A MUST be less than B and both A and B will be treated as positive numbers</desc>
		<param>
			<name>A</name>
			<type>MREG</type>
			<desc>The dividend or top number</desc>
		</param>
		<param>
			<name>B</name>
			<type>MREG</type>
			<desc>The divisor or bottom number</desc>
		</param>
		<param>
			<name>C</name>
			<type>MREG</type>
			<desc>The quotient or result</desc>
		</param>
		<code>
			cpy_cm	r0, A
			cpy_cm	r1, B
			log2	r0
			cpy_cc	r0, acc32
			log2	r1
			cpy_cc	r1, acc32
			subs	r0, r1
			exp2	acc32
			cpy_mc	C, acc32
		</code>
	</sub>
	<sub>
		<name>mr_nth_root</name>
		<desc>Find the Nth root of a number, N is an integer so for square root N=2, for cube root N=3, etc.the number will be treated as a positivre number</desc>
		<param>
			<name>A</name>
			<type>MREG</type>
			<desc>The number we want the Nth root of, will be treated as a positive value</desc>
		</param>
		<param>
			<name>R</name>
			<type>INT</type>
			<desc>The root we want, square root = 2, cube root = 3, etc.</desc>
		</param>
		<param>
			<name>RESULT</name>
			<type>MREG</type>
			<desc>The result</desc>
		</param>
		<code>
			cpy_cm	r0, A
			cpy_cm	r1, R
			log2	r0
			multri	acc32, (1/R)
			exp2	acc32
			cpy_mc	RESULT, acc32
		</code>
	</sub>
	<sub>
		<name>mr_sgn</name>
<desc>The SGN or SIGN function, if IN less than 0 then OUT=-1, if IN=0 then out=0, if IN greater than 0 then OUT=+1</desc>
		<param>
			<name>IN</name>
			<type>MREG</type>
			<desc>Input signal</desc>
		</param>
		<param>
			<name>OUT</name>
			<type>MREG</type>
			<desc>Result of -1, 0 or +1 depending on sign and value of IN</desc>
		</param>
		<code>
			cpy_cm	r0, IN
			jnz	r0, not_zero
			xor	acc32, acc32
			jmp	outter
			not_zero: jneg	r0, negative
			wrdld	acc32, 0x7FFF
			ori	acc32, 0xFFFF
			jmp	outter
			negative:
			wrdld	acc32, 0x8000
			ori	acc32, 0x0000
			outter: cpy_mc	OUT, acc32
		</code>
	</sub>
	<sub>
		<name>mr_sin_offset</name>
		<desc>Given a SIN and COS wave input generate a SIN wave at the same frequency but offset from SIN by some number of degrees. OFFSET spans 0 to 1, RANGE of 0 means +90 to -90, RANGE of 1 means -90 to -270</desc>
		<param>
			<name>SIN</name>
			<type>MREG</type>
			<desc>SIN wave input</desc>
		</param>
		<param>
			<name>COS</name>
			<type>MREG</type>
			<desc>COS wave input</desc>
		</param>
		<param>
			<name>OFFSET</name>
			<type>MREG</type>
			<desc>Offset control, ranges 0 to 1 corresponding to a +90 to -90/-90 to -270 offset</desc>
		</param>
		<param>
			<name>RANGE</name>
			<type>INT</type>
			<desc>Switch to use for range control, 0 mena SW0, 1 means SW1, etc.</desc>
		</param>
		<param>
			<name>OFFSET_SIN</name>
			<type>MREG</type>
			<desc>MREG to put calculated offset sin wave</desc>
		</param>
		<code>
			cpy_cm	r0, OFFSET		;
			cpy_cm	r1, SIN			; SIN(a)
			cpy_cm	r2, COS			; COS(a)
			addsi	r0, -0.5		; -0.5 to +0.5
			sls	acc32, 1		; *2 so -1.0 to +1.0
			cpy_cc	r0, acc32		; -1 to +1, this is SIN(b)
			wrdld	r3, 0x7FFF		; load up 1.0 into r3
			ori	r3, 0xFFFF
			cpy_cc	r3, acc32
			multrr	r0, r0			; SIN(b)^2
			subs	r3, acc32		; 1 - SIN(b)^2
			log2	acc32			; square root of acc32
			sra	acc32, 1
			exp2	acc32			; COS(b)
			cpy_cc	r4, acc32
			cpy_cs  r15, switch
			sr	r15, RANGE
			andi    acc32, SW0
			jz	acc32, outter
			neg	r4
			cpy_cc	r4, acc32
			outter: multrr	r1, r4		; SIN(a) * COS(b)
			cpy_cc	r5, acc32
			multrr	r2, r0			; COS(a) * SIN(b)
			adds	r5, acc32
			cpy_mc	OFFSET_SIN, acc32
		</code>
	</sub>
</library>