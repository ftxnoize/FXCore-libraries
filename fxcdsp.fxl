<library>
	<name>fxcdsp</name>
	<desc>Basic library of routines for the FXCore DSP from Experimental Noize</desc>
	<sub>
		<name>get_in</name>
		<desc>SFR in to a MREG.</desc>
		<param>
			<name>in</name>
			<type>SFR</type>
			<desc>SFR to read like in0 , in1, pot0, etc..</desc>
		</param>
		<param>
			<name>sig</name>
			<type>MREG</type>
			<desc>MREG to save SFR into</desc>
		</param>
		<code>
			cpy_cs	r0, in
			cpy_mc	sig, r0
		</code>
	</sub>
	<sub>
		<name>send_out</name>
		<desc>MREG out to a SFR.</desc>
		<param>
			<name>out</name>
			<type>SFR</type>
			<desc>SFR to save to like out0,  etc.</desc>
		</param>
		<param>
			<name>sig</name>
			<type>MREG</type>
			<desc>MREG to send out to SFR</desc>
		</param>
		<code>
			cpy_cm	r0, sig
			cpy_sc	out, r0
		</code>
	</sub>
	<sub>
		<name>pitch0</name>
		<desc>pitch shifter using ramp 0, +/- 1 octave</desc>
		<param>
			<name>shft</name>
			<type>POT</type>
			<desc>POT to use to adjust shift ammount like pot0, pot1, etc.</desc>
		</param>
		<param>
			<name>sig_in</name>
			<type>MREG</type>
			<desc>MREG holding signal to shift</desc>
		</param>
		<param>
			<name>sig_out</name>
			<type>MREG</type>
			<desc>MREG holding shifted signal</desc>
		</param>
		<code>
			.mem pdelay 4096
			cpy_cs r0, shft
			wrdld r1, 0xC000
			adds r0, r1
			wrdld r0, 0xFFF0
			multrr acc32, r0
			jgez acc32, OK
			sls acc32, 1
			OK:cpy_sc ramp0_f, acc32
			cpy_cm acc32, sig_in
			wrdel pdelay, acc32
			pitch rmp0|l4096, pdelay
			cpy_mc sig_out, acc32
		</code>
	</sub>
	<sub>
		<name>svf</name>
		<desc>state variable filter</desc>
		<param>
			<name>freq</name>
			<type>POT</type>
			<desc>POT to control frequency point of filter like pot0, pot1</desc>
		</param>
		<param>
			<name>q</name>
			<type>POT</type>
			<desc>POT to control Q of filter like pot0, pot1</desc>
		</param>
		<param>
			<name>in_lp</name>
			<type>MREG</type>
			<desc>MREG to hold input low-pass filter, not controled by freq or q</desc>
		</param>
		<param>
			<name>bp</name>
			<type>MREG</type>
			<desc>MREG to hold band-pass filter</desc>
		</param>
		<param>
			<name>lp</name>
			<type>MREG</type>
			<desc>MREG to hold low-pass filter</desc>
		</param>
		<param>
			<name>hp</name>
			<type>MREG</type>
			<desc>MREG to hold high-pass filter</desc>
		</param>
		<param>
			<name>notch</name>
			<type>MREG</type>
			<desc>MREG to hold notch filter</desc>
		</param>
		<param>
			<name>sig_in</name>
			<type>MREG</type>
			<desc>MREG to hold input signal to filter</desc>
		</param>
		<code>
			cpy_cs r7, freq
			cpy_cs r8, q	; actually this is D,which is 1/Q so invert pot sweep to make it act like a Q control
			wrdld acc32, 0x7fff ; put almost 1.0 into acc32
			ori acc32, 0xffff ; don't forget the LSBs
			subs acc32, r8 ; 1-pot in acc32
			cpy_cc r8, acc32

			cpy_cm r0, sig_in ; read in0 into temp
			sra r0, 1 ; in/2
			cpy_cc r0, acc32 ; save to temp
			cpy_cm r2, in_lp
			adds acc32, r2 ; in/2 + input LP
			cpy_cc r1, acc32 ; input to SVF in temp2
			cpy_mc in_lp, r0 ; save in/2 to input LP
			cpy_cm r4, bp
			multrr r8, r4 ; Kd * BP
			subs r1, acc32 ; input - Kd*BP, this is the notch
			cpy_cc r5, acc32 ; save notch result
			multrr r7, r4 ; Kf * BP
			cpy_cm r3, lp
			adds r3, acc32 ; + LP
			cpy_cc r3, acc32 ; save to LP
			subs r5, acc32 ; Notch - LP is HP
			cpy_cc r6, acc32 ; save it
			multrr r7, acc32 ; Kf * HP
			adds r4, acc32 ; + BP
			cpy_mc bp, acc32 ; Save to BP
			cpy_mc lp, r3
			cpy_mc hp, r6
			cpy_mc notch, r5
		</code>
	</sub>
	<sub>
		<name>phaser_4stage_lfo</name>
		<desc>4 stage phaser using LFO as the waveform</desc>
		<param>
			<name>LFO</name>
			<type>INT</type>
			<desc>Which LFO to use, lfo0_s, lfo0_c, lfo1_s, etc.</desc>
		</param>
		<param>
			<name>LFO_FREQ</name>
			<type>INT</type>
			<desc>The LFO frequency register for the selected LFO, lfo0_f, lfo1_f, etc.</desc>
		</param>
		<param>
			<name>rate</name>
			<type>POT</type>
			<desc>POT to control LFO0 rate</desc>
		</param>
		<param>
			<name>range</name>
			<type>POT</type>
			<desc>POT to control phase shifter range</desc>
		</param>
		<param>
			<name>resonance</name>
			<type>POT</type>
			<desc>POT to control resonance</desc>
		</param>
		<param>
			<name>mix</name>
			<type>POT</type>
			<desc>POT to control depth(mix)</desc>
		</param>
		<param>
			<name>feedback</name>
			<type>MREG</type>
			<desc>MREG to hold feedback signal from phase shifter</desc>
		</param>
		<param>
			<name>ap1</name>
			<type>MREG</type>
			<desc>MREG to hold first allpass filter</desc>
		</param>
		<param>
			<name>ap2</name>
			<type>MREG</type>
			<desc>MREG to hold second allpass filter</desc>
		</param>
		<param>
			<name>ap3</name>
			<type>MREG</type>
			<desc>MREG to hold third allpass filter</desc>
		</param>
		<param>
			<name>ap4</name>
			<type>MREG</type>
			<desc>MREG to hold fourth allpass filter</desc>
		</param>
		<param>
			<name>in_sig</name>
			<type>MREG</type>
			<desc>MREG to hold input signal to phase shifter</desc>
		</param>
		<param>
			<name>out_sig</name>
			<type>MREG</type>
			<desc>MREG to hold output signal from phase shifter</desc>
		</param>
		<code>
			cpy_cs    r0, rate
			multrr    r0, r0
			wrdld     r0, 0x1F          
			multrr    acc32, r0
			cpy_sc    LFO_FREQ, acc32
			cpy_cs    r0, LFO
			sra       r0, 2
			addsi     acc32, -0.25
			cpy_cs    r0, range
			multrr    r0, acc32
			wrdld     r0, 0xC667
			adds      r0, acc32
			cpy_cc    r1, acc32           
			cpy_cm    r3, in_sig
			cpy_cm	  r0, feedback
			adds      r3, r0
			sra       acc32, 6
			apma      r1, ap1             ; AP 1
			apmb      r1, ap1
			apma      r1, ap2             ; AP 2
			apmb      r1, ap2
			apma      r1, ap3             ; AP 3
			apmb      r1, ap3
			apma      r1, ap4             ; AP 4
			apmb      r1, ap4
			sls       acc32, 6
			subs      acc32, r3            ; acc32 = fpo - in0
			cpy_cs    r0, mix         ; mix pot placed in r0
			multrr    r0, acc32             ; acc32 = acc32 * mix = mix*(fpo - in0)
			adds      acc32, r3
			cpy_mc    out_sig, acc32             ; output it!
			cpy_cs    r1, resonance           ; Read resonance POT
			multrr    acc32, r1               ; Multiply the output by the feedback
			wrdld     r0, 0x7000
			multrr    acc32, r0             ; Multiply by limit
			cpy_mc    feedback, acc32         ; save it in feedback for next time
		</code>
	</sub>
	<sub>
		<name>lfo_flash_led</name>
		<desc>Flash an LED connected to a USR pin using an LFO</desc>
		<param>
			<name>USER</name>
			<type>INT</type>
			<desc>Which user output to flash, put USER0 or USER1</desc>
		</param>
		<param>
			<name>LFO</name>
			<type>INT</type>
			<desc>Which LFO to use as the source, lfo0_s, lfo0_c, lfo1_s, etc.</desc>
		</param>
		<param>
			<name>bright</name>
			<type>MREG</type>
			<desc>MREG to hold brightness value</desc>
		</param>
		<code>
			cpy_cs    acc32, samplecnt        ; Get the sample counter
			andi      acc32, 0xFF             ; Mask b[7:0]
			jnz       acc32, doPWM            ;

			; Reload new PWM value from LFO into "bright"
			cpy_cs    r0, LFO                 ; read in LFO wave ranges -1.0 to +1.0 (well, almost)
			sra       r0, 1                   ; /2 to +/- 1/2
			addsi     acc32, 0.5              ; ranges 0 to 1
			sra       acc32, 23               ; shift the PWM value in place
			cpy_mc    bright, acc32           ; save it

			doPWM:
			cpy_cm	  r0, bright
			addi      r0, -1                  ; subtract 1 from on count
			cpy_mc    bright, acc32           ; Save updated "bright"
			xor       acc32, acc32            ; Clear acc32 for the LED off case
			jneg      r0, doLED               ;
			ori       acc32, 1                ; Set acc32[0] for the LED on case

			doLED:
			set       USER|0, acc32          ; set the usr output per the acc32 LSB
		</code>
	</sub>
	<sub>
		<name>tapdel</name>
		<desc>Tap tempo delay with flashing LED</desc>
		<param>
			<name>dlen</name>
			<type>INT</type>
			<desc>Delay line length in samples</desc>
		</param>
		<param>
			<name>LP_POT</name>
			<type>POT</type>
			<desc>Low pass filter pot</desc>
		</param>
		<param>
			<name>FB_POT</name>
			<type>POT</type>
			<desc>Feedback pot</desc>
		</param>
		<param>
			<name>LP</name>
			<type>MREG</type>
			<desc>Low pass filter register</desc>
		</param>
		<param>
			<name>old_delay</name>
			<type>MREG</type>
			<desc>Used to hold the old delay time</desc>
		</param>
		<param>
			<name>led_state</name>
			<type>MREG</type>
			<desc>Holds the LED state</desc>
		</param>
		<param>
			<name>blink</name>
			<type>MREG</type>
			<desc>Holds blink time</desc>
		</param>
		<param>
			<name>user_bit</name>
			<type>INT</type>
			<desc>Which user output to flash, enter USER0 or USER1</desc>
		</param>
		<param>
			<name>in_sig</name>
			<type>MREG</type>
			<desc>Input signal from MREG</desc>
		</param>
		<param>
			<name>out_sig</name>
			<type>MREG</type>
			<desc>Output from delay into an MREG</desc>
		</param>
		<code>
			; Define the delay line
			.mem      delay     dlen

			; set some tap tempo SFR values
			; adding .i to force integer as we have no idea what a user will pass
			.sreg.i     MAXtempo  dlen

			; set LP pot control range
			cpy_cs    r0, LP_POT
			multri    r0, 0.75
			addsi     acc32, 0.25
			cpy_cc    r2, acc32

			; write a 0 to the delay head 
			xor       acc32, acc32            ; clear acc32
			wrdel     delay, acc32            ; write 0 to head of delay

			andi      flags, newTT            ; New tap temp?
			jz        acc32, no_tap           ; if no new tap make no change
			cpy_cs    r1, taptempo     ; get the tap count into r1
			sl        r1, 16           ; shift to 31:16
			cpy_cc    r1, acc32

			no_tap:
			interp    r1, delay       ; linearly interpolate the result from the delay line

			; Add the dry signal to the delayed signal
			cpy_cm    r0, in_sig
			adds      r0, acc32

			; Output it
			cpy_mc    out_sig, acc32


			; multiply by feedback
			cpy_cs    r0, FB_POT
			multrr    acc32, r0

			; LP filter it
			cpy_cm    r3, LP
			subs      acc32, r3
			multrr    acc32, r2
			adds      acc32, r3
			cpy_mc    LP, acc32

			; write to delay line
			wrdel     delay, acc32

			; flash LED at delay rate 50% duty cycle
			cpy_cm	  r4, blink
			cpy_cm	  r5, led_state
			cpy_cm	  r6, old_delay
			; old delay time - current delay time to see if it has changed
			sr        r1, 16          ; put calculated delay value into acc32[15:0]
			cpy_cc    r7, acc32       ; save back
			xor       acc32, acc32            ; clear acc32
			subs      r6, r7   ; subtract current calculated delay from old one
			jz        acc32, same             ; if same jump over saving new value
			; new value, set LED and update the time
			ori       r5, 0x1        ; turn on LED
			cpy_cc    r5, acc32      ; save current state
			cpy_cc    r6, r7   ; over write the old delay time
			sr        r7, 1           ; /2 for 50% duty cycle
			cpy_cc    r4, acc32       ; copy to the blink time

			same:
			xor       acc32, acc32            ; clear acc32
			ori       acc32, 1                ; set the LSB
			subs      r4, acc32       ; subtract it
			cpy_cc    r4, acc32       ; copy result to r4
			jnz       acc32,not_zero          ; if not 0 jump over the rest
			cpy_cc    r6, r7   ; timed out, get the latest count
			sr        r6, 1            ; load count/2 back in
			cpy_cc    r4, acc32       ; copy to timer counter
			xori      r5, 0x1        ; flip user0 state
			cpy_cc    r5, acc32
			not_zero:
			set       user_bit|0, r5     ; bit 0 of r5 is sent to user output
			cpy_mc	  blink, r4
			cpy_mc	  led_state, r5
			cpy_mc	  old_delay, r6

		</code>
	</sub>
	<sub>
		<name>lfo_mr</name>
		<desc>LFO using mregs for most controls, set low and high frequencies and selectable wav out with sin, tri, ramp and square. Wave ranges -1.0 to +1.0, best for 0.01 to 1000 hz range</desc>
		<param>
			<name>frequency</name>
			<type>MREG</type>
			<desc>Frequency control, ranges 0 to 1.0</desc>
		</param>
		<param>
			<name>phase</name>
			<type>MREG</type>
			<desc>MREG to hold phase counter</desc>
		</param>
		<param>
			<name>wave_out</name>
			<type>MREG</type>
			<desc>MREG that holds output wave selected, ranges -1.0 to +1.0</desc>
		</param>
		<param>
			<name>sin</name>
			<type>MREG</type>
			<desc>MREG to hold raw sin value</desc>
		</param>
		<param>
			<name>cos</name>
			<type>MREG</type>
			<desc>MREG to hold raw cos value</desc>
		</param>
		<param>
			<name>fmin</name>
			<type>decimal</type>
			<desc>Minimum LFO frequency</desc>
		</param>
		<param>
			<name>fmax</name>
			<type>decimal</type>
			<desc>Maximum LFO frequency</desc>
		</param>
		<param>
			<name>Fs</name>
			<type>decimal</type>
			<desc>Sample rate</desc>
		</param>
		<param>
			<name>sw_shift</name>
			<type>integer</type>
			<desc>Switches to select waveform must be next to each other, this number indicates where they are relative to SW0. So if using SW1 and SW0 then this is 0, if using SW2 and SW1 this is 1, etc.</desc>
		</param>
		<code>
			; load values
			wrdld	r0, (2*3.141592654*fmax/Fs-2*3.141592654*fmin/Fs)*2147483647.u // range value for sin/cos
			ori	r0, (2*3.141592654*fmax/Fs-2*3.141592654*fmin/Fs)*2147483647.l
			cpy_cc	r0, acc32
			wrdld	r1, (2*3.141592654*fmin/Fs)*2147483647.u // min increment value for sin/cos
			ori	r1, (2*3.141592654*fmin/Fs)*2147483647.l
			cpy_cc	r1, acc32
			cpy_cm	r2, phase
			cpy_cm	r3, sin
			cpy_cm	r4, cos
			wrdld	r5, (fmax-fmin)*2^32/Fs.u // range value for sin/cos
			ori	r5, (fmax-fmin)*2^32/Fs.l
			cpy_cc	r5, acc32
			wrdld	r6, fmin*2^32/Fs.u // min increment value for sin/cos
			ori	r6, fmin*2^32/Fs.l
			cpy_cc	r6, acc32

			// check if sin and cos are initialized, if not set initial values
			or	r3, r4	// are r3 and r4 both 0?
			jnz	acc32, go // nope, jump away
			cpy_cc	r3, acc32
			wrdld	r4, 0x7FFF
			ori	r4, 0xFFFF
			cpy_cc	r4, acc32
			go:
			; calculate the phase increment for sin/cos
			cpy_cm    acc32, frequency		; get control for 0 to 1 range
			multrr    acc32, acc32			; square it
			multrr    acc32, r0				; multiply by range
			adds      acc32, r1          ; add r1 for min increment,NOTE non-saturated add so phase counter rolls over
			cpy_cc	  r15, acc32			; save it for sin/cos calc
			; now for ramp/tri/square
			cpy_cm    acc32, frequency		; get control for 0 to 1 range
			multrr    acc32, acc32			; square it
			multrr    acc32, r5				; multiply by range
			adds      acc32, r6          ; add r1 for min increment,NOTE non-saturated add so phase counter rolls over
			add       acc32, r2            ; add current phase position, again non-saturated!
			cpy_cc    r2, acc32            ; save new phase
			cpy_mc	  phase, r2
			; SINE wave
			multrr	r4, r15		; cos*inc
			adds	acc32, r3	; +sin
			cpy_cc	r3, acc32
			multrr	r3, r15		; sin*inc
			subs	r4, acc32	; cos-sin*inc
			cpy_mc	sin, r3
			cpy_mc	cos, acc32
			; select wave form
			cpy_cs  r15, switch
			sr	r15, sw_shift
			andi    acc32, SW0|SW1
			cpy_cc	r15, acc32
			xori	r15, 0x0
			jz	acc32, do_sin
			xori	r15, 0x1
			jz	acc32, do_saw
			xori	r15, 0x2
			jz	acc32, do_tri
			; Square wave
			; Either +1 or 0 based on sign of phase register
			wrdld     acc32, 0x7FFF           ; put +1.0 into temp
			ori	  acc32, 0xFFFF
			jgez      r2, set_sq           ; if phase is positive jump
			neg       acc32            ; phase was negative so make it -1
			set_sq:
			jmp	do_scale
			; Sawtooth wave
			; The phase counter register is a sawtooth so just use it
			do_saw:
			cpy_cc	acc32, r2	; 
			jmp	do_scale
			; Triangle wave
			; We can create a triangle by taking the abs of the sawtooth (phase reg)
			do_tri:
			abs       r2                   ; make it a triangle from 0 to 1
			addsi	acc32, -0.5		; now -0.5 to +0.5
			sls	acc32, 1
			jmp	do_scale
			; Sin wave
			do_sin:
			cpy_cc	acc32, r3
			; output result
			do_scale:
			cpy_mc	wave_out, acc32
		</code>
	</sub>
	<sub>
		<name>phaser_4stage_mreg</name>
		<desc>4 stage phaser using an mreg to get the waveform from</desc>
		<param>
			<name>LFO</name>
			<type>MREG</type>
			<desc>MREG that has the waveform to use, must range -1.0 to +1.0</desc>
		</param>
		<param>
			<name>range</name>
			<type>MREG</type>
			<desc>MREG to control range</desc>
		</param>
		<param>
			<name>resonance</name>
			<type>MREG</type>
			<desc>MREG to control resonance</desc>
		</param>
		<param>
			<name>mix</name>
			<type>MREG</type>
			<desc>MREG to control depth(mix)</desc>
		</param>
		<param>
			<name>feedback</name>
			<type>MREG</type>
			<desc>MREG to hold feedback signal from phase shifter</desc>
		</param>
		<param>
			<name>ap1</name>
			<type>MREG</type>
			<desc>MREG to hold first allpass filter</desc>
		</param>
		<param>
			<name>ap2</name>
			<type>MREG</type>
			<desc>MREG to hold second allpass filter</desc>
		</param>
		<param>
			<name>ap3</name>
			<type>MREG</type>
			<desc>MREG to hold third allpass filter</desc>
		</param>
		<param>
			<name>ap4</name>
			<type>MREG</type>
			<desc>MREG to hold fourth allpass filter</desc>
		</param>
		<param>
			<name>in_sig</name>
			<type>MREG</type>
			<desc>MREG to hold input signal to phase shifter</desc>
		</param>
		<param>
			<name>out_sig</name>
			<type>MREG</type>
			<desc>MREG to hold output signal from phase shifter</desc>
		</param>
		<code>
			cpy_cm    r0, LFO
			sra       r0, 2			;/4 so +/-0.25
			addsi     acc32, -0.25		;-0.25 so range -0.5 to 0 
			cpy_cm    r0, range		;* POT 
			multrr    r0, acc32
			wrdld     r0, 0xC667		
			adds      r0, acc32
                        cpy_cc    r1, acc32
			cpy_cm    r3, in_sig
			cpy_cm	  r0, feedback
			adds      r3, r0
			sra       acc32, 6
			apma      r1, ap1             ; AP 1
			apmb      r1, ap1
			apma      r1, ap2             ; AP 2
			apmb      r1, ap2
			apma      r1, ap3             ; AP 3
			apmb      r1, ap3
			apma      r1, ap4             ; AP 4
			apmb      r1, ap4
			sls       acc32, 6
			subs      acc32, r3            ; acc32 = fpo - in0
			cpy_cm    r0, mix         ; mix pot placed in r0
			multrr    r0, acc32             ; acc32 = acc32 * mix = mix*(fpo - in0)
			adds      acc32, r3
			cpy_mc    out_sig, acc32             ; output it!
			cpy_cm    r1, resonance           ; Read resonance POT
			multrr    acc32, r1               ; Multiply the output by the feedback
			wrdld     r0, 0x7000
			multrr    acc32, r0             ; Multiply by limit
			cpy_mc    feedback, acc32         ; save it in feedback for next time
		</code>
	</sub>
	<sub>
		<name>mreg_flash_led</name>
		<desc>Flash an LED connected to a USR pin using an MREG</desc>
		<param>
			<name>USER</name>
			<type>INT</type>
			<desc>Which user output to flash, put USER0 or USER1</desc>
		</param>
		<param>
			<name>LFO</name>
			<type>MREG</type>
			<desc>Which MREG to use as the source, must range -1.0 to +1.0.</desc>
		</param>
		<param>
			<name>bright</name>
			<type>MREG</type>
			<desc>MREG to hold brightness value</desc>
		</param>
		<code>
			cpy_cs    acc32, samplecnt        ; Get the sample counter
			andi      acc32, 0xFF             ; Mask b[7:0]
			jnz       acc32, doPWM            ;

			; Reload new PWM value from LFO into "bright"
			cpy_cm    r0, LFO                 ; read in LFO wave ranges -1.0 to +1.0 (well, almost)
			sra       r0, 1                   ; /2 to +/- 1/2
			addsi     acc32, 0.5              ; ranges 0 to 1
			sra       acc32, 23                  ; shift the PWM value in place
			cpy_mc    bright, acc32           ; save it

			doPWM:
			cpy_cm	  r0, bright
			addi      r0, -1                  ; subtract 1 from on count
			cpy_mc    bright, acc32           ; Save updated "bright"
			xor       acc32, acc32            ; Clear acc32 for the LED off case
			jneg      r0, doLED               ;
			ori       acc32, 1                ; Set acc32[0] for the LED on case

			doLED:
			set       USER|0, acc32          ; set the usr output per the acc32 LSB
		</code>
	</sub>
</library>
